/* The following code was generated by JFlex 1.4.3 on 10/2/18 3:25 PM */

// tokens.flex

package asintactico;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/2/18 3:25 PM from the specification file
 * <tt>/home/alexis/Documents/Compiladores/Compiladores/Proyectos/Proyecto2/src/main/jflex/atomos.flex</tt>
 */
public class Flexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTACION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\40\25\0\1\1\1\27\1\41\1\43\1\0\1\34"+
    "\2\0\1\36\1\37\1\32\1\30\1\0\1\31\1\4\1\33\1\2"+
    "\11\3\1\14\1\0\1\25\1\5\1\26\2\0\5\35\1\46\15\35"+
    "\1\44\6\35\1\0\1\42\2\0\1\35\1\0\1\23\2\35\1\24"+
    "\1\15\1\13\1\35\1\21\1\10\2\35\1\16\1\35\1\11\1\22"+
    "\1\6\1\35\1\7\1\17\1\12\1\45\1\35\1\20\3\35\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\1\1\4\4\5\1\6"+
    "\4\5\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\1\2\5\1\21\2\22"+
    "\1\1\1\23\4\24\1\25\4\24\1\26\1\27\1\1"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\1\2\24\1\40\1\41\1\42\1\5\1\43\3\5"+
    "\1\44\1\5\1\45\1\46\1\47\1\50\1\51\1\0"+
    "\1\52\2\0\2\5\1\53\1\54\1\24\1\55\3\24"+
    "\1\56\1\24\1\57\1\60\1\61\1\62\1\63\1\0"+
    "\1\64\1\0\2\24\1\5\1\65\2\5\1\66\1\67"+
    "\2\5\1\24\1\70\2\24\1\71\1\72\2\24\1\5"+
    "\1\73\1\5\1\74\1\24\1\75\1\24\1\76\1\77"+
    "\1\100\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\120\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\120\0\u01b8\0\u01e0\0\u0208"+
    "\0\u0230\0\u0258\0\u0280\0\u02a8\0\120\0\120\0\u02d0\0\u02f8"+
    "\0\120\0\120\0\120\0\120\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\120\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0"+
    "\0\u04d8\0\120\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\120\0\120\0\u0618\0\u0640\0\120\0\120\0\120"+
    "\0\120\0\u0668\0\u0690\0\u06b8\0\120\0\310\0\120\0\u06e0"+
    "\0\u0140\0\u0708\0\u0730\0\u0758\0\u0140\0\u0780\0\120\0\120"+
    "\0\120\0\120\0\120\0\u0320\0\u07a8\0\u07a8\0\u0348\0\u07d0"+
    "\0\u07f8\0\u0410\0\120\0\u0820\0\u0488\0\u0848\0\u0870\0\u0898"+
    "\0\u0488\0\u08c0\0\120\0\120\0\120\0\120\0\120\0\u0668"+
    "\0\u08e8\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0140\0\u0988\0\u09b0"+
    "\0\u0140\0\u07a8\0\u09d8\0\u0a00\0\u0a28\0\u0488\0\u0a50\0\u0a78"+
    "\0\u0488\0\u08e8\0\u0aa0\0\u0ac8\0\u0af0\0\u0140\0\u0b18\0\u0140"+
    "\0\u0b40\0\u0488\0\u0b68\0\u0488\0\u0140\0\u0140\0\u0488\0\u0488";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\2\12\1\15\1\16\2\12\1\17\1\12"+
    "\1\20\1\21\1\12\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\12\1\32\1\33\1\34\1\35"+
    "\1\3\1\36\1\37\1\12\1\40\2\3\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\2\47"+
    "\1\52\1\53\2\47\1\54\1\47\1\55\1\56\1\47"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\47\1\67\1\70\1\71\1\72\1\3\1\36\1\73"+
    "\1\47\1\74\1\75\54\0\1\76\45\0\2\6\1\76"+
    "\45\0\2\76\51\0\1\77\44\0\2\12\2\0\1\12"+
    "\1\100\4\12\1\0\10\12\10\0\1\12\6\0\3\12"+
    "\3\0\2\12\2\0\6\12\1\0\10\12\10\0\1\12"+
    "\6\0\3\12\3\0\2\12\2\0\5\12\1\101\1\0"+
    "\10\12\10\0\1\12\6\0\3\12\3\0\2\12\2\0"+
    "\6\12\1\0\5\12\1\102\2\12\10\0\1\12\6\0"+
    "\3\12\3\0\2\12\2\0\6\12\1\0\1\12\1\103"+
    "\6\12\10\0\1\12\6\0\3\12\3\0\2\12\2\0"+
    "\6\12\1\0\4\12\1\104\3\12\10\0\1\12\6\0"+
    "\3\12\3\0\2\12\2\0\1\12\1\105\4\12\1\0"+
    "\10\12\10\0\1\12\6\0\3\12\3\0\2\12\2\0"+
    "\3\12\1\106\2\12\1\0\10\12\10\0\1\12\6\0"+
    "\3\12\6\0\1\107\47\0\1\110\47\0\1\111\74\0"+
    "\1\112\50\0\1\113\14\0\40\114\1\0\1\115\1\116"+
    "\5\114\40\117\1\4\7\117\2\0\2\12\2\0\1\12"+
    "\1\120\4\12\1\0\10\12\10\0\1\12\6\0\3\12"+
    "\3\0\2\12\2\0\6\12\1\0\6\12\1\121\1\12"+
    "\10\0\1\12\6\0\3\12\5\0\1\122\45\0\2\43"+
    "\1\122\45\0\2\122\51\0\1\123\44\0\2\47\2\0"+
    "\1\47\1\124\4\47\1\0\10\47\10\0\1\47\6\0"+
    "\3\47\3\0\2\47\2\0\6\47\1\0\10\47\10\0"+
    "\1\47\6\0\3\47\3\0\2\47\2\0\5\47\1\125"+
    "\1\0\10\47\10\0\1\47\6\0\3\47\3\0\2\47"+
    "\2\0\6\47\1\0\5\47\1\126\2\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\47\2\0\6\47\1\0\1\47"+
    "\1\127\6\47\10\0\1\47\6\0\3\47\3\0\2\47"+
    "\2\0\6\47\1\0\4\47\1\130\3\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\47\2\0\1\47\1\131\4\47"+
    "\1\0\10\47\10\0\1\47\6\0\3\47\3\0\2\47"+
    "\2\0\3\47\1\132\2\47\1\0\10\47\10\0\1\47"+
    "\6\0\3\47\6\0\1\133\47\0\1\134\47\0\1\135"+
    "\74\0\1\136\50\0\1\137\14\0\40\140\1\0\1\141"+
    "\1\142\5\140\2\0\2\47\2\0\1\47\1\143\4\47"+
    "\1\0\10\47\10\0\1\47\6\0\3\47\3\0\2\47"+
    "\2\0\6\47\1\0\6\47\1\144\1\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\12\2\0\2\12\1\145\3\12"+
    "\1\0\10\12\10\0\1\12\6\0\3\12\3\0\2\12"+
    "\2\0\4\12\1\146\1\12\1\0\10\12\10\0\1\12"+
    "\6\0\3\12\3\0\2\12\2\0\6\12\1\0\2\12"+
    "\1\147\5\12\10\0\1\12\6\0\3\12\3\0\2\12"+
    "\2\0\2\12\1\150\3\12\1\0\10\12\10\0\1\12"+
    "\6\0\3\12\3\0\2\12\2\0\6\12\1\0\7\12"+
    "\1\151\10\0\1\12\6\0\3\12\1\0\40\116\1\0"+
    "\1\152\6\116\2\0\2\12\2\0\6\12\1\0\10\12"+
    "\10\0\1\12\6\0\1\12\1\153\1\12\3\0\2\12"+
    "\2\0\6\12\1\0\1\12\1\154\6\12\10\0\1\12"+
    "\6\0\3\12\3\0\2\47\2\0\2\47\1\155\3\47"+
    "\1\0\10\47\10\0\1\47\6\0\3\47\3\0\2\47"+
    "\2\0\4\47\1\156\1\47\1\0\10\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\47\2\0\6\47\1\0\2\47"+
    "\1\157\5\47\10\0\1\47\6\0\3\47\3\0\2\47"+
    "\2\0\2\47\1\160\3\47\1\0\10\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\47\2\0\6\47\1\0\7\47"+
    "\1\161\10\0\1\47\6\0\3\47\1\0\40\142\1\0"+
    "\1\162\6\142\2\0\2\47\2\0\6\47\1\0\10\47"+
    "\10\0\1\47\6\0\1\47\1\163\1\47\3\0\2\47"+
    "\2\0\6\47\1\0\1\47\1\164\6\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\12\2\0\3\12\1\165\2\12"+
    "\1\0\10\12\10\0\1\12\6\0\3\12\3\0\2\12"+
    "\2\0\6\12\1\0\1\166\7\12\10\0\1\12\6\0"+
    "\3\12\3\0\2\12\2\0\6\12\1\0\1\12\1\167"+
    "\6\12\10\0\1\12\6\0\3\12\3\0\2\12\2\0"+
    "\6\12\1\0\1\170\7\12\10\0\1\12\6\0\3\12"+
    "\3\0\2\12\2\0\6\12\1\0\2\12\1\153\5\12"+
    "\10\0\1\12\6\0\3\12\3\0\2\47\2\0\3\47"+
    "\1\171\2\47\1\0\10\47\10\0\1\47\6\0\3\47"+
    "\3\0\2\47\2\0\6\47\1\0\1\172\7\47\10\0"+
    "\1\47\6\0\3\47\3\0\2\47\2\0\6\47\1\0"+
    "\1\47\1\173\6\47\10\0\1\47\6\0\3\47\3\0"+
    "\2\47\2\0\6\47\1\0\1\174\7\47\10\0\1\47"+
    "\6\0\3\47\3\0\2\47\2\0\6\47\1\0\2\47"+
    "\1\163\5\47\10\0\1\47\6\0\3\47\3\0\2\12"+
    "\2\0\4\12\1\175\1\12\1\0\10\12\10\0\1\12"+
    "\6\0\3\12\3\0\2\12\2\0\6\12\1\0\1\176"+
    "\7\12\10\0\1\12\6\0\3\12\3\0\2\47\2\0"+
    "\4\47\1\177\1\47\1\0\10\47\10\0\1\47\6\0"+
    "\3\47\3\0\2\47\2\0\6\47\1\0\1\200\7\47"+
    "\10\0\1\47\6\0\3\47\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\10\1\1\11\7\1\2\11\2\1\4\11"+
    "\4\1\1\11\10\1\1\11\7\1\2\11\2\1\4\11"+
    "\3\1\1\11\1\1\1\11\7\1\5\11\1\0\1\1"+
    "\2\0\3\1\1\11\7\1\5\11\1\0\1\1\1\0"+
    "\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Parser yyparser;

    /** Nuevo constructor
    * @param FileReader r
    * @param parser parser - parser
    */
    public Letras(java.io.Reader r, Parser parser){
    	   this(r);
    	   yyparser = parser;
    }

	Stack<Integer> indentaciones = new Stack<Integer>();
	int espacios = 0;

	public void analiza(String lexema){
		if(indentaciones.empty()){
			if(espacios == 0)
				System.out.printf("%s(%s)",lexema,yytext());
			else{
				System.out.printf("INDENTA(%d)",espacios);
				System.out.printf("%s(%s)",lexema,yytext());
				indentaciones.push(espacios);
			}
		}else{
			if(espacios == 0){
				while(!indentaciones.empty()){
					System.out.printf("DEINDENTA(%d)\n",indentaciones.pop());
				}
				System.out.printf("%s(%s)",lexema,yytext());
			}else if(espacios < indentaciones.peek()){
				while (espacios < indentaciones.peek()) {
					System.out.printf("DEINDENTA(%d)\n",espacios);
                    indentaciones.pop();
				}
				System.out.printf("%s(%s)",lexema,yytext());
			}else if(espacios == indentaciones.peek()){
				System.out.printf("%s(%s)",lexema,yytext());
			}else{
				System.out.printf("INDENTA(%d)",espacios);
				System.out.printf("%s(%s)",lexema,yytext());
				indentaciones.push(espacios);
			}
		}
		espacios = 0;
		yybegin(YYINITIAL);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Flexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Flexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { System.out.printf("ID(%s)", yytext());
          }
        case 67: break;
        case 32: 
          { espacios+=4;
          }
        case 68: break;
        case 7: 
          { System.out.printf("LESS(%s)",yytext());
          }
        case 69: break;
        case 25: 
          { analiza("MINUS");
          }
        case 70: break;
        case 28: 
          { analiza("MODULO");
          }
        case 71: break;
        case 13: 
          { System.out.printf("MODULO(%s)",yytext());
          }
        case 72: break;
        case 65: 
          { analiza("PRINT");
          }
        case 73: break;
        case 49: 
          { analiza("DIFF");
          }
        case 74: break;
        case 47: 
          { analiza("LEQ");
          }
        case 75: break;
        case 45: 
          { analiza("IF");
          }
        case 76: break;
        case 4: 
          { System.out.printf("EQUAL(%s)",yytext());
          }
        case 77: break;
        case 63: 
          { System.out.printf("PRINT(%s)",yytext());
          }
        case 78: break;
        case 52: 
          { analiza("CADENA");
          }
        case 79: break;
        case 6: 
          { System.out.printf("SEPARADOR(%s)", yytext());
          }
        case 80: break;
        case 1: 
          { System.out.println("\n" + "Error:Lexema no reconocido" + " en linea " + (yyline+1)); System.exit(1);
          }
        case 81: break;
        case 51: 
          { analiza("DASH");
          }
        case 82: break;
        case 8: 
          { System.out.printf("MORE(%s)",yytext());
          }
        case 83: break;
        case 30: 
          { analiza("RIGHTP");
          }
        case 84: break;
        case 39: 
          { System.out.printf("DIFF(%s)",yytext());
          }
        case 85: break;
        case 20: 
          { analiza("ID");
          }
        case 86: break;
        case 53: 
          { System.out.printf("NOT(%s)",yytext());
          }
        case 87: break;
        case 40: 
          { System.out.printf("BY(%s)",yytext());
          }
        case 88: break;
        case 46: 
          { analiza("OR");
          }
        case 89: break;
        case 16: 
          { System.out.printf("INDENTA(%s)", yytext());
          }
        case 90: break;
        case 37: 
          { System.out.printf("LEQ(%s)",yytext());
          }
        case 91: break;
        case 2: 
          { /*IGNORAR*/
          }
        case 92: break;
        case 64: 
          { System.out.printf("WHILE(%s)",yytext());
          }
        case 93: break;
        case 35: 
          { System.out.printf("IF(%s)",yytext());
          }
        case 94: break;
        case 60: 
          { System.out.printf("BOOLEANO(%s)", yytext());
          }
        case 95: break;
        case 36: 
          { System.out.printf("OR(%s)",yytext());
          }
        case 96: break;
        case 26: 
          { analiza("TIMES");
          }
        case 97: break;
        case 9: 
          { System.out.printf("PLUS(%s)",yytext());
          }
        case 98: break;
        case 38: 
          { System.out.printf("GEQ(%s)",yytext());
          }
        case 99: break;
        case 23: 
          { analiza("MORE");
          }
        case 100: break;
        case 48: 
          { analiza("GEQ");
          }
        case 101: break;
        case 62: 
          { analiza("BOOLEANO");
          }
        case 102: break;
        case 55: 
          { System.out.println("\n" + "Error:Cadena mal formada" + " en linea " + (yyline+1)); System.exit(1);
          }
        case 103: break;
        case 57: 
          { analiza("AND");
          }
        case 104: break;
        case 56: 
          { analiza("NOT");
          }
        case 105: break;
        case 19: 
          { analiza("EQUAL");
          }
        case 106: break;
        case 10: 
          { System.out.printf("MINUS(%s)",yytext());
          }
        case 107: break;
        case 61: 
          { analiza("ELSE");
          }
        case 108: break;
        case 27: 
          { analiza("DIVIDE");
          }
        case 109: break;
        case 18: 
          { analiza("ENTERO");
          }
        case 110: break;
        case 15: 
          { System.out.printf("RIGHTP(%s)", yytext());
          }
        case 111: break;
        case 58: 
          { analiza("CADENAINVALIDA");
          }
        case 112: break;
        case 54: 
          { System.out.printf("AND(%s)",yytext());
          }
        case 113: break;
        case 42: 
          { System.out.printf("CADENA(%s)", yytext());
          }
        case 114: break;
        case 14: 
          { System.out.printf("LEFTP(%s)", yytext());
          }
        case 115: break;
        case 59: 
          { System.out.printf("ELSE(%s)",yytext());
          }
        case 116: break;
        case 34: 
          { System.out.printf("DEQ(%s)",yytext());
          }
        case 117: break;
        case 50: 
          { analiza("BY");
          }
        case 118: break;
        case 22: 
          { analiza("LESS");
          }
        case 119: break;
        case 3: 
          { System.out.printf("ENTERO(%s)", yytext());
          }
        case 120: break;
        case 21: 
          { analiza("COLON");
          }
        case 121: break;
        case 31: 
          { analiza("INDENTA");
          }
        case 122: break;
        case 12: 
          { System.out.printf("DIVIDE(%s)",yytext());
          }
        case 123: break;
        case 43: 
          { analiza("REAL");
          }
        case 124: break;
        case 29: 
          { analiza("LEFTP");
          }
        case 125: break;
        case 24: 
          { analiza("PLUS");
          }
        case 126: break;
        case 17: 
          { espacios++;
          }
        case 127: break;
        case 11: 
          { System.out.printf("TIMES(%s)",yytext());
          }
        case 128: break;
        case 41: 
          { System.out.printf("DASH(%s)",yytext());
          }
        case 129: break;
        case 33: 
          { System.out.printf("REAL(%s)",yytext());
          }
        case 130: break;
        case 66: 
          { analiza("WHILE");
          }
        case 131: break;
        case 44: 
          { analiza("DEQ");
          }
        case 132: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Flexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Flexer scanner = null;
        try {
          scanner = new Flexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
